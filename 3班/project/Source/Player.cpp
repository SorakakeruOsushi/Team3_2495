#include "Player.h"
#include "Stage.h"
#include <cassert>

const float Gravity = 0.3f;							 //重力
const float JumpHight = 40 * 2;						 //ジャンプの高さ
//			v0 = -  √   2   *   g     *    S
const float V0 = -sqrtf(2.0f * Gravity * JumpHight); //放物線(ジャンプ)の式

Player::Player()
{
	// Playerは縦２x横１マスの大きさ
	hImage = LoadGraph("data/image/player_2-1.png");
		assert(hImage > 0);

	position.x = 0;
	position.y = 0;

	speed = 1.5f;

	dead = false;
}

Player::~Player()
{
	DeleteGraph(hImage);
}

void Player::Update()
{
	if(dead)
	{
		return;
	}

	Stage* s = FindGameObject<Stage>();

	//テスト用上下操作
	if (CheckHitKey(KEY_INPUT_W))
	{
		position.y -= speed;//上
	}
	if (CheckHitKey(KEY_INPUT_S))
	{
		position.y += speed;//下
	}
	
	//左右移動
	if (CheckHitKey(KEY_INPUT_A))
	{
		//左
		position.x -= speed;
		/*
		//左に壁があるか調べる
		int push = s->IsWallLeft(position + VECTOR2(0, 0));
		position.x += push;
		push = s->IsWallLeft(position + VECTOR2(0, 29));
		position.x += push;
		*/
	}
	if (CheckHitKey(KEY_INPUT_D))
	{
		//右
		position.x += speed;
		/*
		//右に壁があるか調べる
		int push = s->IsWallRight(position + VECTOR2(59, 0));
		position.x -= push;
		push = s->IsWallRight(position + VECTOR2(59, 59));
		position.x -= push;
		*/
	}

	/*
	//★『BlockMaze』からのコピペになります。
	//★ 実行すると例外が発生するのでコメントアウトしました。
	//★ 当たり判定処理を上手く書けた方いましたら、こちらは削除しても構いません。

	//ジャンプ
	if (CheckHitKey(KEY_INPUT_SPACE))
	{
		if (prevJumpKey == false)
		{
			if (onGround == true)
			{
				//2マス分飛ぶ velocity:速度
				velocity = V0; //"初速"
			}
		}
		prevJumpKey = true;
	}
	else
	{
		prevJumpKey = false;
	}

	//重力
	position.y += velocity; //座標には速度を足す
	velocity += Gravity;	//下向きの力　速度には重力を足す
	onGround = false;

	//下に壁があるか調べる
	if (velocity >= 0)// velocity:速度
	{
		int push = s->IsWallDown(position + VECTOR2(0, 60)); //一個下を見るので60
		if (push > 0)	//地面に触れたので
		{
			velocity = 0;			//地面に触ったら速度を0に
			position.y -= push - 1; //地面の上に押し返す	1個下を見るのでpush-1
			onGround = true;		//接地してる
		}
		push = s->IsWallDown(position + VECTOR2(29, 60));	 //一個下を見る一個下を見るので60
		if (push > 0)	//地面に触れたので
		{
			velocity = 0;			//地面に触ったら速度を0に
			position.y -= push - 1; //地面の上に押し返す	1個下を見るのでpush-1
			onGround = true;		//接地してる
		}
	}
	//上に壁があるか調べる
	else
	{
		int push = s->IsWallUp(position + VECTOR2(0, 0));
		if (push > 0)
		{
			velocity = 0.0f;
			position.y += push;
		}
		push = s->IsWallUp(position + VECTOR2(29, 0));
		if (push > 0)
		{
			velocity = 0.0f;
			position.y += push;
		}
	}
	*/

	//プレイヤーに合わせてスクロール(上方向)
	if (position.y - s->scroll < 30 * 15) //プレイヤーのY座標が〇マス以上(仮)
	{
		s->scroll = position.y - 30 * 15; //スクロール速度をプレイヤーに合わせる
	}
	//プレイヤーに合わせてスクロール(下方向)
	if (position.y - s->scroll > 30 * 20) //プレイヤーのY座標が〇マス以下(仮)
	{
		s->scroll = position.y - 30 * 20; //スクロール速度をプレイヤーに合わせる
	}
	
}

void Player::Draw()
{
	Stage* s = FindGameObject<Stage>();
	DrawGraph(position.x, position.y - s->scroll, hImage, TRUE);
}
